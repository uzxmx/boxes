# -*- mode: ruby -*-
# vi: set ft=ruby :

$num_instances = <%= config.num_instances || 2 %>
$instance_name_prefix = '<%= config.instance_name_prefix || "k8s" %>'
$vm_gui = false
$vm_memory = 2048
$vm_cpus = 1
$subnet = '<%= config.subnet %>'
$etcd_instances = $num_instances % 2 == 0 ? $num_instances - 1 : $num_instances
$kube_master_instances = $num_instances == 1 ? $num_instances : $num_instances - 1
$kube_node_instances = $num_instances
$host_vars = {}

def configure_ansible(node, playbook)
  node.vm.provision :ansible do |ansible|
    ansible.playbook = "<%= File.join(config.ansible_playbooks_path, 'kubespray/#{playbook}') %>"
    if playbook == 'reset.yml'
      ansible.extra_vars = { reset_confirmation: 'yes' }
    end

    ansible.limit = 'all,localhost'
    ansible.host_key_checking = false
    ansible.raw_arguments = ["--forks=#{$num_instances}", '--flush-cache', '-e ansible_become_pass=vagrant']
    ansible.verbose = true
    ansible.become = true
    ansible.host_vars = $host_vars

    group_vars = {}
    Dir['<%= File.join(config.ansible_playbooks_path, "kubespray_inventory/local/group_vars/*") %>'].each do |path|
      name = File.basename(path, '.*')
      if File.directory?(path)
        config_paths = Dir[File.join(path, '*.{yml,yaml,json}')].to_a
      else
        config_paths = [path]
      end
      vars = {}
      config_paths.sort.each do |config_path|
        extname = File.extname(config_path)
        if extname == 'json'
          config = JSON.parse(File.read(config_path))
        else
          config = YAML.load(File.read(config_path))
        end
        if config.is_a?(Hash) && !config.empty?
          config.each do |key, value|
            if value == true || value == false
              config[key] = config[key] ? 'True' : 'False'
            end
          end
          vars.merge!(config)
        end
      end
      group_vars["#{name}:vars"] = vars
    end
    ansible.groups = group_vars.merge(
      'etcd' => ["#{$instance_name_prefix}-[1:#{$etcd_instances}]"],
      'kube-master' => ["#{$instance_name_prefix}-[1:#{$kube_master_instances}]"],
      'kube-node' => ["#{$instance_name_prefix}-[1:#{$kube_node_instances}]"],
      'k8s-cluster:children' => ['kube-master', 'kube-node']
    )
  end
end

Vagrant.configure('2') do |config|
  <%- if config.zygote -%>
  config.vm.box = 'uzxmx/mybox'
  <%- else -%>
  config.vm.box = 'uzxmx/k8s'
  <%- end -%>

  (1..$num_instances).each do |i|
    config.vm.define vm_name = "%s-%01d" % [$instance_name_prefix, i] do |node|
      node.vm.hostname = vm_name

      node.vm.provider :virtualbox do |vb|
        vb.memory = $vm_memory
        vb.cpus = $vm_cpus
        vb.gui = $vm_gui
      end

      ip = "#{$subnet}.#{i+100}"
      node.vm.network :private_network, ip: ip

      $host_vars[vm_name] = { ip: ip }

      # Only execute the Ansible provisioner once, when all the machines are up and ready.
      if i == $num_instances
        configure_ansible(node, 'cluster.yml')
        <%- if config.zygote -%>
        configure_ansible(node, 'reset.yml')
        <%- end -%>
      end
    end
  end
end
